name: Conda

on: [push, pull_request]
#on:
#  push:
#    paths:
#      - doc/sphinxman/
#  pull_request:
#    paths:
#      - doc/sphinxman/

jobs:

  docs:
    runs-on: ubuntu-latest
    name: Linux Docs
    defaults:
      run:
        shell: bash -l {0}

    steps:
    - uses: actions/checkout@v2

#    - name: "OneAPI: setup apt repo"
#      run: devtools/oneapi-ci/setup_apt_repo_linux.sh
#
#    - name: "OneAPI F: collect versioned dependencies of apt packages"
#      run: devtools/oneapi-ci/apt_depends.sh $LINUX_FORTRAN_COMPONENTS | tee depends_f.txt
#
#    - name: "OneAPI C: collect versioned dependencies of apt packages"
#      run: devtools/oneapi-ci/apt_depends.sh $LINUX_CPP_COMPONENTS | tee depends_c.txt
#
#    - name: "OneAPI F: cache install"
#      id: cache-install-f
#      uses: actions/cache@v2
#      with:
#        path: |
#          /opt/intel/oneapi/compiler
#        key: install-${{ env.LINUX_FORTRAN_COMPONENTS }}-${{ hashFiles('**/depends_f.txt') }}-compiler-${{ hashFiles('**/devtools/oneapi-ci/cache_exclude_linux.sh') }}
#
#    - name: "OneAPI C: cache install"
#      id: cache-install-c
#      uses: actions/cache@v2
#      with:
#        path: |
#          /opt/intel/oneapi/compiler
#        key: install-${{ env.LINUX_CPP_COMPONENTS }}-${{ hashFiles('**/depends_c.txt') }}-compiler-${{ hashFiles('**/devtools/oneapi-ci/cache_exclude_linux.sh') }}
#
#    - name: "OneAPI F: install"
#      if: steps.cache-install-f.outputs.cache-hit != 'true'
#      run: devtools/oneapi-ci/install_linux_apt.sh $LINUX_FORTRAN_COMPONENTS
#
#    - name: "OneAPI C: install"
#      if: steps.cache-install-c.outputs.cache-hit != 'true'
#      run: devtools/oneapi-ci/install_linux_apt.sh $LINUX_CPP_COMPONENTS
#
#    - name: "OneAPI: exclude unused files from cache"
#      if: (steps.cache-install.outputs.cache-hit != 'true') || (steps.cache-install-c.outputs.cache-hit != 'true')
#      run: devtools/oneapi-ci/cache_exclude_linux.sh

    - name: Create Conda Environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: test
        add-pip-as-python-dependency: true
        auto-activate-base: false
        channels: conda-forge
        environment-file: devtools/conda-envs/docs-cf.yaml
        python-version: 3.8
        show-channel-urls: true

#conda install anaconda-client
    - name: Environment Information
      run: |
        conda info
        conda list
        which conda python cmake ninja $CXX

#      # Source Compilers is for reference. happens for real w/i conda recipe
#    - name: Source Compilers
#      run: |
#        LATEST_VERSION=$(ls -1 /opt/intel/oneapi/compiler/ | grep -v latest | sort | tail -1)
#        source /opt/intel/oneapi/compiler/"$LATEST_VERSION"/env/vars.sh
#        which conda conda-build python ifort icc icpc
#        ifort --version
#        icc --version
#        icpc --version
#
#      # `-c defaults -c psi4/label/dev` -or- `-c conda-forge` for QCElemental dep
#    - name: Conda-Build for Linux
#      run: conda build conda/recipe -c defaults -c psi4/label/dev --output-folder . --error-overlinking --error-overdepending

    - name: Configure with CMake (Intel + MKL)
      run: |
        cmake \
          -S. \
          -Bobjdir \
          -G"Unix Makefiles" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=${CC} \
          -DCMAKE_CXX_COMPILER=${CXX} \
          -DCMAKE_CXX_FLAGS="-O0" \
          -DCMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
          -DCMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
          -DCMAKE_INSIST_FIND_PACKAGE_Libint=ON \
          -DCMAKE_INSIST_FIND_PACKAGE_pybind11=ON \
          -DCMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
          -DCMAKE_INSIST_FIND_PACKAGE_qcelemental=ON \
          -DCMAKE_INSIST_FIND_PACKAGE_qcengine=ON \
          -DSPHINX_ROOT=${CONDA_PREFIX}


# selectors in meta.yaml constrain to Linux, Py3 only

# link against conda MKL & GCC
# * since libefp uses mkl, makes sense to do so here, too
#LAPACK_INTERJECT="${PREFIX}/lib/libmkl_rt.so"

# configure
    #-DCMAKE_INSTALL_PREFIX=${PREFIX} \
    #-DCMAKE_CXX_FLAGS="--coverage" \
    #-DCMAKE_INSTALL_LIBDIR=lib \
    #-DPYMOD_INSTALL_LIBDIR="/python${PY_VER}/site-packages" \
    #-DENABLE_libefp=ON \
    #-DCMAKE_INSIST_FIND_PACKAGE_libefp=ON \
    #-DENABLE_OPENMP=ON \
    #-DENABLE_XHOST=OFF \
    #-DENABLE_GENERIC=OFF \
    #-DLAPACK_LIBRARIES="${LAPACK_INTERJECT}" \
    #-DLAPACK_INCLUDE_DIRS="${PREFIX}/include" \

## build
#cd build
#make -j${CPU_COUNT}
#
## install psi4
#make install
#
## can't use full PREFIX or workaround b/c tests and make/install intertwined so use shorter prefix
#
## test
#stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat
#
## docs build
#make ghfeed
#make doxyman
#make sphinxman -j${CPU_COUNT}
#
## install docs
#make install

    - name: Compile Psi4
      run: cmake --build objdir --verbose

    - name: Compile Docs
      run: cmake --build objdir --target sphinxman --verbose

#    - name: Smoke Test Binary
#      run: |
#        eval "$(conda shell.bash hook)" && conda activate
#        source /opt/intel/oneapi/setvars.sh intel64
#        ./objdir/dftd3 -version
#        ./objdir/dftd3 -h
#        ldd ./objdir/dftd3



#
#    - name: Meson Log
#      if: ${{ failure() }}
#      run: cat /usr/local/miniconda/conda-bld/dftd4_*/work/_build/meson-logs/meson-log.txt
#
#    - name: Archive Conda Package
#      uses: actions/upload-artifact@v2
#      with:
#        name: linux-dftd4-conda-package
#        path: |
#          linux-64/*.tar.bz2
#        retention-days: 1
#
#      # continue-on-error allows the whole job not to fail just b/c storage limits at anaconda.org hit
#    - name: Upload Conda Package
#      continue-on-error: true
#      env:
#        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
#      run: anaconda upload --label gha --skip linux-64/*.tar.bz2
